-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Problemas de Exercitium (curso 2013-14)
--   
--   Ejercicios de programación funcional con Haskell propuestos en el blog
--   Exercitium durante el curso 2013-14.
@package Exercitium1314
@version 0.1.0.0

module Suma_si_todos_justos
sumaSiTodosJustos :: (Num a, Eq a) => [Maybe a] -> Maybe a
todosJustos :: Eq a => [Maybe a] -> Bool
todosJustos2 :: Eq a => [Maybe a] -> Bool
sumaSiTodosJustos2 :: (Num a, Eq a) => [Maybe a] -> Maybe a
sumaSiTodosJustos3 :: (Num a, Eq a) => [Maybe a] -> Maybe a
sumaSiTodosJustos4 :: (Num a, Eq a) => [Maybe a] -> Maybe a
sumaSiTodosJustos5 :: (Num a, Eq a) => [Maybe a] -> Maybe a
sumaSiTodosJustos6 :: (Num a, Eq a) => [Maybe a] -> Maybe a

module Primos_equidistantes
primosEquidistantes :: Integer -> [(Integer, Integer)]
primo :: Integer -> Bool
primos :: [Integer]
primosEquidistantes2 :: Integer -> [(Integer, Integer)]

module Primos_consecutivos_con_media_capicua
primosConsecutivosConMediaCapicua :: [(Int, Int, Int)]
primo :: Int -> Bool
primos :: [Int]
capicua :: Int -> Bool
primosConsecutivosConMediaCapicua2 :: [(Int, Int, Int)]


-- | Definir la función
--   
--   <pre>
--   ordenadosPorMaximo :: Ord a =&gt; [[a]] -&gt; [[a]]
--   </pre>
--   
--   tal que (ordenadosPorMaximo xss) es la lista de los elementos de xss
--   ordenada por sus máximos. Por ejemplo,
--   
--   <pre>
--   &gt;&gt;&gt; ordenadosPorMaximo [[3,2],[6,7,5],[1,4]]
--   [[3,2],[1,4],[6,7,5]]
--   
--   &gt;&gt;&gt; ordenadosPorMaximo ["este","es","el","primero"]
--   ["el","primero","es","este"]
--   </pre>
module Ordenados_por_maximo
ordenadosPorMaximo :: Ord a => [[a]] -> [[a]]

-- | Comprueba la equivalencia de las definiciones
--   
--   <pre>
--   &gt;&gt;&gt; verificaOrdenadosPorMaximo
--   +++ OK, passed 100 tests.
--   </pre>
verificaOrdenadosPorMaximo :: IO ()

module Matriz_Toeplitz
ej1 :: Array (Int, Int) Int
ej2 :: Array (Int, Int) Int
esToeplitz :: Eq a => Array (Int, Int) a -> Bool

module Mastermind
mastermind :: [Int] -> [Int] -> (Int, Int)
aciertos :: Eq a => [a] -> [a] -> [a]
coincidencias :: Eq a => [a] -> [a] -> [a]
mastermind2 :: [Int] -> [Int] -> (Int, Int)
mastermind3 :: [Int] -> [Int] -> (Int, Int)


-- | Definir la función
--   
--   <pre>
--   igualesAlSiguiente :: Eq a =&gt; [a] -&gt; [a]
--   </pre>
--   
--   tal que (igualesAlSiguiente xs) es la lista de los elementos de xs que
--   son iguales a su siguiente. Por ejemplo,
--   
--   <pre>
--   &gt;&gt;&gt; igualesAlSiguiente [1,2,2,2,3,3,4::Int]
--   [2,2,3]
--   
--   &gt;&gt;&gt; igualesAlSiguiente [1..10::Int]
--   []
--   </pre>
module Iguales_al_siguiente
igualesAlSiguiente :: Eq a => [a] -> [a]

-- | Comprueba la equivalencia de las definiciones
--   
--   <pre>
--   &gt;&gt;&gt; verificaIgualesAlSiguiente
--   +++ OK, passed 100 tests.
--   </pre>
verificaIgualesAlSiguiente :: IO ()

module ElementosMinimales
minimales :: Eq a => [[a]] -> [[a]]
subconjuntoPropio :: Eq a => [a] -> [a] -> Bool


-- | El problema de la bandera tricolor consiste en lo siguiente: Dada un
--   lista de objetos xs que pueden ser rojos, amarillos o morados, se pide
--   devolver una lista ys que contiene los elementos de xs, primero los
--   rojos, luego los amarillos y por último los morados.
--   
--   Definir el tipo de dato Color para representar los colores con los
--   constructores R, A y M correspondientes al rojo, azul y morado y la
--   función
--   
--   <pre>
--   banderaTricolor :: [Color] -&gt; [Color]
--   </pre>
--   
--   tal que (banderaTricolor xs) es la bandera tricolor formada con los
--   elementos de xs. Por ejemplo,
--   
--   <pre>
--   &gt;&gt;&gt; banderaTricolor [M,R,A,A,R,R,A,M,M]
--   [R,R,R,A,A,A,M,M,M]
--   
--   &gt;&gt;&gt; banderaTricolor [M,R,A,R,R,A]
--   [R,R,R,A,A,M]
--   </pre>
module Bandera_tricolor
data Color
banderaTricolor :: [Color] -> [Color]

-- | Comprueba la equivalencia de las definiciones
--   
--   <pre>
--   &gt;&gt;&gt; verifica_banderaTricolor
--   +++ OK, passed 100 tests.
--   </pre>
verifica_banderaTricolor :: IO ()
instance GHC.Enum.Enum Bandera_tricolor.Color
instance GHC.Classes.Ord Bandera_tricolor.Color
instance GHC.Classes.Eq Bandera_tricolor.Color
instance GHC.Show.Show Bandera_tricolor.Color
instance Test.QuickCheck.Arbitrary.Arbitrary Bandera_tricolor.Color

module Anagramas
anagramas :: String -> [String] -> [String]
sonAnagramas :: String -> String -> Bool
sonAnagramas2 :: String -> String -> Bool
sonAnagramas3 :: String -> String -> Bool
anagramas2 :: String -> [String] -> [String]
anagramas3 :: String -> [String] -> [String]
anagramas4 :: String -> [String] -> [String]
