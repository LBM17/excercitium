-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Problemas de Exercitium (curso 2013-14)
--   
--   Ejercicios de programación funcional con Haskell propuestos en el blog
--   Exercitium durante el curso 2013-14.
@package Exercitium1314
@version 0.1.0.0

module Suma_si_todos_justos
sumaSiTodosJustos :: (Num a, Eq a) => [Maybe a] -> Maybe a
todosJustos :: Eq a => [Maybe a] -> Bool
todosJustos2 :: Eq a => [Maybe a] -> Bool
sumaSiTodosJustos2 :: (Num a, Eq a) => [Maybe a] -> Maybe a
sumaSiTodosJustos3 :: (Num a, Eq a) => [Maybe a] -> Maybe a
sumaSiTodosJustos4 :: (Num a, Eq a) => [Maybe a] -> Maybe a
sumaSiTodosJustos5 :: (Num a, Eq a) => [Maybe a] -> Maybe a
sumaSiTodosJustos6 :: (Num a, Eq a) => [Maybe a] -> Maybe a

module Primos_equidistantes
primosEquidistantes :: Integer -> [(Integer, Integer)]
primo :: Integer -> Bool
primos :: [Integer]
primosEquidistantes2 :: Integer -> [(Integer, Integer)]

module Primos_consecutivos_con_media_capicua
primosConsecutivosConMediaCapicua :: [(Int, Int, Int)]
primo :: Int -> Bool
primos :: [Int]
capicua :: Int -> Bool
primosConsecutivosConMediaCapicua2 :: [(Int, Int, Int)]

module Ordenados_por_maximo
ordenadosPorMaximo :: Ord a => [[a]] -> [[a]]
ordenadosPorMaximo2 :: Ord a => [[a]] -> [[a]]
ordenadosPorMaximo3 :: Ord a => [[a]] -> [[a]]

module Matriz_Toeplitz
ej1 :: Array (Int, Int) Int
ej2 :: Array (Int, Int) Int
esToeplitz :: Eq a => Array (Int, Int) a -> Bool

module Mastermind
mastermind :: [Int] -> [Int] -> (Int, Int)
aciertos :: Eq a => [a] -> [a] -> [a]
coincidencias :: Eq a => [a] -> [a] -> [a]
mastermind2 :: [Int] -> [Int] -> (Int, Int)
mastermind3 :: [Int] -> [Int] -> (Int, Int)


-- | Definir la función
--   
--   <pre>
--   igualesAlSiguiente :: Eq a =&gt; [a] -&gt; [a]
--   </pre>
--   
--   tal que (igualesAlSiguiente xs) es la lista de los elementos de xs que
--   son iguales a su siguiente. Por ejemplo,
--   
--   <pre>
--   &gt;&gt;&gt; igualesAlSiguiente [1,2,2,2,3,3,4::Int]
--   [2,2,3]
--   
--   &gt;&gt;&gt; igualesAlSiguiente [1..10::Int]
--   []
--   </pre>
module Iguales_al_siguiente

-- | 1ª definición (por comprensión):
igualesAlSiguiente :: Eq a => [a] -> [a]

-- | 2ª definición (por recursión)
igualesAlSiguiente2 :: Eq a => [a] -> [a]

-- | 3ª definición (con concat y comprensión)
igualesAlSiguiente3 :: Eq a => [a] -> [a]

-- | 4ª definición (con concatMap)
igualesAlSiguiente4 :: Eq a => [a] -> [a]

-- | 5ª definición (con concatMap y sin argumentos):
igualesAlSiguiente5 :: Eq a => [a] -> [a]

-- | (prop_igualesAlSiguiente xs) se verifica si todas las definiciones de
--   igualesAlsiguiente son equivalentes para xs. Por ejemplo,
--   
--   <pre>
--   &gt;&gt;&gt; prop_igualesAlSiguiente [1,2,2,2,3,3,4]
--   True
--   
--   &gt;&gt;&gt; prop_igualesAlSiguiente [1..10]
--   True
--   </pre>
prop_igualesAlSiguiente :: [Int] -> Bool

-- | Comprueba la equivalencia de las definiciones
--   
--   <pre>
--   &gt;&gt;&gt; verifica
--   +++ OK, passed 100 tests.
--   </pre>
verifica :: IO ()

module ElementosMinimales
minimales :: Eq a => [[a]] -> [[a]]
subconjuntoPropio :: Eq a => [a] -> [a] -> Bool

module Bandera_tricolor
data Color
R :: Color
A :: Color
M :: Color
banderaTricolor :: [Color] -> [Color]
banderaTricolor2 :: [Color] -> [Color]
banderaTricolor3 :: [Color] -> [Color]
banderaTricolor4 :: [Color] -> [Color]
banderaTricolor5 :: [Color] -> [Color]
instance GHC.Enum.Enum Bandera_tricolor.Color
instance GHC.Classes.Ord Bandera_tricolor.Color
instance GHC.Classes.Eq Bandera_tricolor.Color
instance GHC.Show.Show Bandera_tricolor.Color

module Anagramas
anagramas :: String -> [String] -> [String]
sonAnagramas :: String -> String -> Bool
sonAnagramas2 :: String -> String -> Bool
sonAnagramas3 :: String -> String -> Bool
anagramas2 :: String -> [String] -> [String]
anagramas3 :: String -> [String] -> [String]
anagramas4 :: String -> [String] -> [String]
